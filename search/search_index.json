{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MaxGradient automates the printing gradient colored text to the console. It's built upon the great rich library. It contains a Console that can serve as a drop in replacement for rich.rich.Console and has an expanded Color class which can parse X11 color names on top of rich's standard colors. MaxGradient is a work in progress and I'm open to any suggestions or contributions. Installation MaxGradient can be installed from PyPi using your favorite python package manager: PDM (Recommended) \u00b6 pdm add maxgradient PIP \u00b6 pip install maxgradient Usage Quick Start \u00b6 The basic usage is to create a console object and use it to print gradient text. MaxGradient.Console is a drop in replacement for rich.rich.Console and can be used in the same way. It does, however, have some additional methods like gradient () . Example #import console from MaxGradient import maxgradient as mg console = mg . Console () # Initialize a console console . gradient ( \"Hello, World!\" , justify = \"center\" ) Gradient with Color \u00b6 MaxGradient easily make random gradients that require no more than the text you wish to color, it can also be used to make gradients with specific colors. The gradient () method takes a string of text as well as a list of colors. The number of colors in the list determines the number of colors in the gradient. The gradient will be evenly distributed between the colors in the list. The gradient will be applied to the text in the order it is given in the list. MaxGradient accepts the following as color names ( red , orange , yellow , green , cyan , lightblue , blue , purple , violet , magenta ) hex color codes (3-digit -> #f0f , 6-digit -> #ff00ff ) rgb color codes X11 named colors as well as any colors from rich's standard library. Let's take a look at some examples: Example 1 \u00b6 import maxgradient as mg console = mg . Console () # Initialize a console console . gradient ( \"This gradient contains the colors: magenta, violet, and purple.\" , colors = [ \"magenta\" , \"violet\" , \"purple\" ]) Example 2 \u00b6 You are not just stuck with ROY G BIV colors, you can use any colors you want. Let's make a gradient with the colors: magenta, violet, purple, blue, lightblue, and cyan. console . gradient ( \"This gradient contains the colors: magenta, violet, purple, blue, lightblue, and cyan.\" , colors = [ \"rgb(255,0,255)\" , # rgb \"violet\" , # named \"#5f00ff\" , # hex \"blue\" , \"rgb(0, 136, 255)\" , \"cyan\" ] )","title":"Getting Started"},{"location":"#pdm-recommended","text":"pdm add maxgradient","title":"PDM (Recommended)"},{"location":"#pip","text":"pip install maxgradient","title":"PIP"},{"location":"#quick-start","text":"The basic usage is to create a console object and use it to print gradient text. MaxGradient.Console is a drop in replacement for rich.rich.Console and can be used in the same way. It does, however, have some additional methods like gradient () .","title":"Quick Start"},{"location":"#gradient-with-color","text":"MaxGradient easily make random gradients that require no more than the text you wish to color, it can also be used to make gradients with specific colors. The gradient () method takes a string of text as well as a list of colors. The number of colors in the list determines the number of colors in the gradient. The gradient will be evenly distributed between the colors in the list. The gradient will be applied to the text in the order it is given in the list. MaxGradient accepts the following as color names ( red , orange , yellow , green , cyan , lightblue , blue , purple , violet , magenta ) hex color codes (3-digit -> #f0f , 6-digit -> #ff00ff ) rgb color codes X11 named colors as well as any colors from rich's standard library. Let's take a look at some examples:","title":"Gradient with Color"},{"location":"#example-1","text":"import maxgradient as mg console = mg . Console () # Initialize a console console . gradient ( \"This gradient contains the colors: magenta, violet, and purple.\" , colors = [ \"magenta\" , \"violet\" , \"purple\" ])","title":"Example 1"},{"location":"#example-2","text":"You are not just stuck with ROY G BIV colors, you can use any colors you want. Let's make a gradient with the colors: magenta, violet, purple, blue, lightblue, and cyan. console . gradient ( \"This gradient contains the colors: magenta, violet, purple, blue, lightblue, and cyan.\" , colors = [ \"rgb(255,0,255)\" , # rgb \"violet\" , # named \"#5f00ff\" , # hex \"blue\" , \"rgb(0, 136, 255)\" , \"cyan\" ] )","title":"Example 2"},{"location":"color/","text":"MaxGradient.Color \u00b6 Color extends the Rich.color.Color class to allow colors to be parsed from: X11 color names (over 200 colors) Rich's Standard Color Library Hex codes (3-digit and 6-digit) RGB values (with or without the 'rgb' prefix) A color can be represented as a string in numerous ways. The easiest is the name of the color: red magenta blue You can also use the hex code of the color: #ff0000 (six digit hex code) #f0f (three digit hex code) Or the rgb values of the color: rgb(0,85,0) (with rgb prefix) (0, 255, 0) ( rgb tuple without prefix) In addition to common names, MaxGradient also supports the entire rich color standard color palette. But we didn't stop there, in addition to rich's standard library, MaxGradient also supports the entire X11 color palette. That's over 200 colors! Example 1: Color(\"red\") \u00b6 from maxgradient import Color , Console console = Console () console . print ( Color ( \"red\" ), justify = \"center\" ) Example 2: Color(\"#AAFFAA\") \u00b6 console . print ( Color ( \"#aaffaa\" ), justify = \"center\" ) Example 3: Color(\"DarkOrchid\") \u00b6 console . print ( Color ( \"DarkOrchid\" ), justify = \"center\" ) Possible Colors \u00b6 To view all of the available colors run the following command in the console: python -m maxgradient.color","title":"Color"},{"location":"color/#maxgradientcolor","text":"Color extends the Rich.color.Color class to allow colors to be parsed from: X11 color names (over 200 colors) Rich's Standard Color Library Hex codes (3-digit and 6-digit) RGB values (with or without the 'rgb' prefix) A color can be represented as a string in numerous ways. The easiest is the name of the color: red magenta blue You can also use the hex code of the color: #ff0000 (six digit hex code) #f0f (three digit hex code) Or the rgb values of the color: rgb(0,85,0) (with rgb prefix) (0, 255, 0) ( rgb tuple without prefix) In addition to common names, MaxGradient also supports the entire rich color standard color palette. But we didn't stop there, in addition to rich's standard library, MaxGradient also supports the entire X11 color palette. That's over 200 colors!","title":"MaxGradient.Color"},{"location":"color/#example-1-colorred","text":"from maxgradient import Color , Console console = Console () console . print ( Color ( \"red\" ), justify = \"center\" )","title":"Example 1: Color(\"red\")"},{"location":"color/#example-2-coloraaffaa","text":"console . print ( Color ( \"#aaffaa\" ), justify = \"center\" )","title":"Example 2:  Color(\"#AAFFAA\") "},{"location":"color/#example-3-colordarkorchid","text":"console . print ( Color ( \"DarkOrchid\" ), justify = \"center\" )","title":"Example 3: Color(\"DarkOrchid\")"},{"location":"color/#possible-colors","text":"To view all of the available colors run the following command in the console: python -m maxgradient.color","title":"Possible Colors"},{"location":"color_ref/","text":"body>div.wy-grid-for-nav>section>div { background: #333 }","title":"Color"},{"location":"console/","text":"Console \u00b6 MaxGradient.console.Console() is a subclass of rich.console.Console() that adds gradient functionality to the console. Just it can be instantiated in multiple ways: Directly: from maxgradient import Console console = Console () console . print ( \"[bold lime]Hello, World![/]\" ) New Methods \u00b6 Console also has two new methods that you can take advantage of in your projects: First New Method \u00b6 Console . gradient () \u00b6 There's and low level look at MaxGradient.gradient.Gradient 's class in the next section. For now, just know that any of the parameters that can be used by MaxGradient.gradient.Gradient() can also be used by console.gradient() . Example \u00b6 console . gradient ( \"This is by far the simplest way to print \\ gradient colored text to the console.\" , colors = [ \"red\" , \"orange\" , \"yellow\" , \"green\" ], justify = \"center\" , style = \"bold\" ) Second New Method \u00b6 Console . gradient_rule () \u00b6 Console.gradient_rule() expands on rich.rule.Rule() by allowing you to specify both the colors of the rule's gradient, as well as the rule's thickness. Examples \u00b6 Gradient Rule \u00b6 from maxgradient.console import Console console = Console () console . gradient_rule ( \"Medium Gradient Rule\" )","title":"Console"},{"location":"console/#console","text":"MaxGradient.console.Console() is a subclass of rich.console.Console() that adds gradient functionality to the console. Just it can be instantiated in multiple ways: Directly: from maxgradient import Console console = Console () console . print ( \"[bold lime]Hello, World![/]\" )","title":"Console"},{"location":"console/#new-methods","text":"Console also has two new methods that you can take advantage of in your projects:","title":"New Methods"},{"location":"console/#first-new-method","text":"","title":"First New Method"},{"location":"console/#consolegradient","text":"There's and low level look at MaxGradient.gradient.Gradient 's class in the next section. For now, just know that any of the parameters that can be used by MaxGradient.gradient.Gradient() can also be used by console.gradient() .","title":"Console.gradient()"},{"location":"console/#example","text":"console . gradient ( \"This is by far the simplest way to print \\ gradient colored text to the console.\" , colors = [ \"red\" , \"orange\" , \"yellow\" , \"green\" ], justify = \"center\" , style = \"bold\" )","title":"Example"},{"location":"console/#second-new-method","text":"","title":"Second New Method"},{"location":"console/#consolegradient_rule","text":"Console.gradient_rule() expands on rich.rule.Rule() by allowing you to specify both the colors of the rule's gradient, as well as the rule's thickness.","title":"Console.gradient_rule()"},{"location":"console/#examples","text":"","title":"Examples"},{"location":"console/#gradient-rule","text":"from maxgradient.console import Console console = Console () console . gradient_rule ( \"Medium Gradient Rule\" )","title":"Gradient Rule"},{"location":"console_ref/","text":"Console \u00b6 class maxgradient.console. Console ( * , color_system='auto' , force_terminal=None , force_jupyter=None , force_interactive=None , soft_wrap=False , theme=None , stderr=False , file=None , quiet=False , width=None , height=None , style=None , no_color=None , tab_size=4 , record=False , markup=True , emoji=True , emoji_variant=None , highlight=True , log_time=True , log_path=True , log_time_format='[%X]' , highlighter=None() , legacy_windows=None , safe_box=True , get_datetime=None , get_time=None , traceback=None , _environ=None ) [source] \u00b6 A custom-themed high level interface for the Console class that inherits from rich.console.Console. This class is a singleton which removes the need to pass around a console object or use the `get_console` method. Parameters color_system ( str , optional ) \u2013 The color system supported by your terminal. Valid values are: \"auto\", \"standard\", \"256\", \"truecolor\", Leave as \"auto\" to autodetect. force_terminal ( Optional [ bool ] , optional ) \u2013 Enable/disable terminal control codes, or None to auto-detect terminal. Defaults to None. force_jupyter ( Optional [ bool ] , optional ) \u2013 Enable/disable Jupyter rendering, or None to auto-detect Jupyter. Defaults to None. force_interactive ( Optional [ bool ] , optional ) \u2013 Enable/disable interactive mode, or None to auto detect. Defaults to None. soft_wrap ( Optional [ bool ] , optional ) \u2013 Set soft wrap default on print method. Defaults to False. theme ( Theme , optional ) \u2013 An optional style theme object, or None for default theme, GradientTheme() stderr ( bool , optional ) \u2013 Use stderr rather than stdout if `file` is not specified. Defaults to False. file ( IO , optional ) \u2013 A file object where the console should write to. Defaults to stdout. quiet ( bool , Optional ) \u2013 Boolean to suppress all output. Defaults to False. width ( int , optional ) \u2013 The width of the terminal. Leave as default to auto-detect width. height ( int , optional ) \u2013 The height of the terminal. Leave as default to auto-detect height. style ( StyleType , optional ) \u2013 Style to apply to all output, or None for no style. Defaults to None. no_color ( Optional [ bool ] , optional ) \u2013 Enabled no color mode, or None to auto detect. Defaults to None. tab_size ( int , optional ) \u2013 Number of spaces used to replace a tab character. Defaults to 4. record ( bool , optional ) \u2013 Boolean to enable recording of terminal output, required to call export_html() , export_svg() , and export_text() . Defaults to False. markup ( bool , optional ) \u2013 Boolean to enable Console Markup . Defaults to True. emoji ( bool , optional ) \u2013 Enable emoji code. Defaults to True. emoji_variant ( str , optional ) \u2013 Optional emoji variant, either \u201ctext\u201d or \u201cemoji\u201d. Defaults to None. highlight ( bool , optional ) \u2013 Enable automatic highlighting. Defaults to True. log_time ( bool , optional ) \u2013 Boolean to enable logging of time by log() methods. Defaults to True. log_path ( bool , optional ) \u2013 Boolean to enable the logging of the caller by log() . Defaults to True. log_time_format ( Union [ str , TimeFormatterCallable ] , optional ) \u2013 If `log_time` is enabled, either string for strftime or callable that formats the time. Defaults to \u201c[%X] \u201c. highlighter ( HighlighterType , optional ) \u2013 Default highlighter. legacy_windows ( bool , optional ) \u2013 Enable legacy Windows mode, or `None` to auto detect. Defaults to `None`. safe_box ( bool , optional ) \u2013 Restrict box options that don\u2019t render on legacy Windows. get_datetime ( Callable [ [ ] , datetime ] , optional ) \u2013 Callable that gets the current time as a datetime.datetime object (used by Console.log), or None for datetime.now. get_time ( Callable [ [ ] , time ] , optional ) \u2013 Callable that gets the current time in seconds, default uses time.monotonic. _environ ( Mapping [ str , str ] ) \u2013 begin_capture ( ) [source] \u00b6 Begin capturing console output. Call end_capture() to exit capture mode and return output. Return type None bell ( ) [source] \u00b6 Play a \u2018bell\u2019 sound (if supported by the terminal). Return type None capture ( ) [source] \u00b6 A context manager to capture the result of print() or log() in a string, rather than writing it to the console. Example >>> from rich.console import Console >>> console = Console () >>> with console . capture () as capture : ... console . print ( \"[bold magenta]Hello World[/]\" ) >>> print ( capture . get ()) Copy to clipboard Returns Context manager with disables writing to the terminal. Return type Capture clear ( home = True ) [source] \u00b6 Clear the screen. Parameters home ( bool , optional ) \u2013 Also move the cursor to \u2018home\u2019 position. Defaults to True. Return type None clear_live ( ) [source] \u00b6 Clear the Live instance. Return type None property color_system : Optional [ str ] \u00b6 Get color system string. Returns \u201cstandard\u201d, \u201c256\u201d or \u201ctruecolor\u201d. Return type Optional[ str ] control ( * control ) [source] \u00b6 Insert non-printing control codes. Parameters control_codes ( str ) \u2013 Control codes, such as those that may move the cursor. control ( Control ) \u2013 Return type None property encoding : str \u00b6 Get the encoding of the console file, e.g. \"utf-8\" . Returns A standard encoding string. Return type str end_capture ( ) [source] \u00b6 End capture mode and return captured string. Returns Console output. Return type str export_html ( * , theme = None , clear = True , code_format = None , inline_styles = False ) [source] \u00b6 Generate HTML from console contents (requires record=True argument in constructor). Parameters theme ( TerminalTheme , optional ) \u2013 TerminalTheme object containing console colors. clear ( bool , optional ) \u2013 Clear record buffer after exporting. Defaults to True . code_format ( str , optional ) \u2013 Format string to render HTML. In addition to \u2018{foreground}\u2019, \u2018{background}\u2019, and \u2018{code}\u2019, should contain \u2018{stylesheet}\u2019 if inline_styles is False . inline_styles ( bool , optional ) \u2013 If True styles will be inlined in to spans, which makes files larger but easier to cut and paste markup. If False , styles will be embedded in a style tag. Defaults to False. Returns String containing console contents as HTML. Return type str export_svg ( * , title = 'Rich' , theme = None , clear = True , code_format = '<svg class=\"rich-terminal\" viewBox=\"0 0 {width} {height}\" xmlns=\"http://www.w3.org/2000/svg\">\\n <!-- Generated with Rich https://www.textualize.io -->\\n <style>\\n\\n @font-face {{\\n font-family: \"Fira Code\";\\n src: local(\"FiraCode-Regular\"),\\n url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),\\n url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");\\n font-style: normal;\\n font-weight: 400;\\n }}\\n @font-face {{\\n font-family: \"Fira Code\";\\n src: local(\"FiraCode-Bold\"),\\n url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),\\n url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");\\n font-style: bold;\\n font-weight: 700;\\n }}\\n\\n .{unique_id}-matrix {{\\n font-family: Fira Code, monospace;\\n font-size: {char_height}px;\\n line-height: {line_height}px;\\n font-variant-east-asian: full-width;\\n }}\\n\\n .{unique_id}-title {{\\n font-size: 18px;\\n font-weight: bold;\\n font-family: arial;\\n }}\\n\\n {styles}\\n </style>\\n\\n <defs>\\n <clipPath id=\"{unique_id}-clip-terminal\">\\n <rect x=\"0\" y=\"0\" width=\"{terminal_width}\" height=\"{terminal_height}\" />\\n </clipPath>\\n {lines}\\n </defs>\\n\\n {chrome}\\n <g transform=\"translate({terminal_x}, {terminal_y})\" clip-path=\"url(#{unique_id}-clip-terminal)\">\\n {backgrounds}\\n <g class=\"{unique_id}-matrix\">\\n {matrix}\\n </g>\\n </g>\\n</svg>\\n' , font_aspect_ratio = 0.61 , unique_id = None ) [source] \u00b6 Generate an SVG from the console contents (requires record=True in Console constructor). Parameters title ( str , optional ) \u2013 The title of the tab in the output image theme ( TerminalTheme , optional ) \u2013 The TerminalTheme object to use to style the terminal clear ( bool , optional ) \u2013 Clear record buffer after exporting. Defaults to True code_format ( str , optional ) \u2013 Format string used to generate the SVG. Rich will inject a number of variables into the string in order to form the final SVG output. The default template used and the variables injected by Rich can be found by inspecting the console.CONSOLE_SVG_FORMAT variable. font_aspect_ratio ( float , optional ) \u2013 The width to height ratio of the font used in the code_format string. Defaults to 0.61, which is the width to height ratio of Fira Code (the default font). If you aren\u2019t specifying a different font inside code_format , you probably don\u2019t need this. unique_id ( str , optional ) \u2013 unique id that is used as the prefix for various elements (CSS styles, node ids). If not set, this defaults to a computed value based on the recorded content. Return type str export_text ( * , clear = True , styles = False ) [source] \u00b6 Generate text from console contents (requires record=True argument in constructor). Parameters clear ( bool , optional ) \u2013 Clear record buffer after exporting. Defaults to True . styles ( bool , optional ) \u2013 If True , ansi escape codes will be included. False for plain text. Defaults to False . Returns String containing console contents. Return type str property file : IO [ str ] \u00b6 Get the file object to write to. get_style ( name , * , default = None ) [source] \u00b6 Get a Style instance by its theme name or parse a definition. Parameters name ( str ) \u2013 The name of a style or a style definition. default ( Optional [ Union [ str , Style ] ] ) \u2013 Returns A Style object. Return type Style Raises MissingStyle \u2013 If no style could be parsed from name. property height : int \u00b6 Get the height of the console. Returns The height (in lines) of the console. Return type int input ( prompt = '' , * , markup = True , emoji = True , password = False , stream = None ) [source] \u00b6 Displays a prompt and waits for input from the user. The prompt may contain color / style. It works in the same way as Python\u2019s builtin input() function and provides elaborate line editing and history features if Python\u2019s builtin readline module is previously loaded. Parameters prompt ( Union [ str , Text ] ) \u2013 Text to render in the prompt. markup ( bool , optional ) \u2013 Enable console markup (requires a str prompt). Defaults to True. emoji ( bool , optional ) \u2013 Enable emoji (requires a str prompt). Defaults to True. password ( bool ) \u2013 (bool, optional): Hide typed text. Defaults to False. stream ( Optional [ TextIO ] ) \u2013 (TextIO, optional): Optional file to read input from (rather than stdin). Defaults to None. Returns Text read from stdin. Return type str property is_alt_screen : bool \u00b6 Check if the alt screen was enabled. Returns True if the alt screen was enabled, otherwise False. Return type bool property is_dumb_terminal : bool \u00b6 Detect dumb terminal. Returns True if writing to a dumb terminal, otherwise False. Return type bool property is_terminal : bool \u00b6 Check if the console is writing to a terminal. Returns True if the console writing to a device capable of understanding terminal codes, otherwise False. Return type bool line ( count = 1 ) [source] \u00b6 Write new line(s). Parameters count ( int , optional ) \u2013 Number of new lines. Defaults to 1. Return type None log ( * objects , sep = ' ' , end = '\\n' , style = None , justify = None , emoji = None , markup = None , highlight = None , log_locals = False , _stack_offset = 1 ) [source] \u00b6 Log rich content to the terminal. Parameters objects ( positional args ) \u2013 Objects to log to the terminal. sep ( str , optional ) \u2013 String to write between print data. Defaults to \u201d \u201c. end ( str , optional ) \u2013 String to write at end of print data. Defaults to \u201c\\n\u201d. style ( Union [ str , Style ] , optional ) \u2013 A style to apply to output. Defaults to None. justify ( str , optional ) \u2013 One of \u201cleft\u201d, \u201cright\u201d, \u201ccenter\u201d, or \u201cfull\u201d. Defaults to None . emoji ( Optional [ bool ] , optional ) \u2013 Enable emoji code, or None to use console default. Defaults to None. markup ( Optional [ bool ] , optional ) \u2013 Enable markup, or None to use console default. Defaults to None. highlight ( Optional [ bool ] , optional ) \u2013 Enable automatic highlighting, or None to use console default. Defaults to None. log_locals ( bool , optional ) \u2013 Boolean to enable logging of locals where log() was called. Defaults to False. _stack_offset ( int , optional ) \u2013 Offset of caller from end of call stack. Defaults to 1. Return type None measure ( renderable , * , options = None ) [source] \u00b6 Measure a renderable. Returns a Measurement object which contains information regarding the number of characters required to print the renderable. Parameters renderable ( RenderableType ) \u2013 Any renderable or string. options ( Optional [ ConsoleOptions ] , optional ) \u2013 Options to use when measuring, or None to use default options. Defaults to None. Returns A measurement of the renderable. Return type Measurement property options : ConsoleOptions \u00b6 Get default console options. out ( * objects , sep = ' ' , end = '\\n' , style = None , highlight = None ) [source] \u00b6 Output to the terminal. This is a low-level way of writing to the terminal which unlike print() won\u2019t pretty print, wrap text, or apply markup, but will optionally apply highlighting and a basic style. Parameters sep ( str , optional ) \u2013 String to write between print data. Defaults to \u201d \u201c. end ( str , optional ) \u2013 String to write at end of print data. Defaults to \u201c\\n\u201d. style ( Union [ str , Style ] , optional ) \u2013 A style to apply to output. Defaults to None. highlight ( Optional [ bool ] , optional ) \u2013 Enable automatic highlighting, or None to use console default. Defaults to None . objects ( Any ) \u2013 Return type None pager ( pager = None , styles = False , links = False ) [source] \u00b6 A context manager to display anything printed within a \u201cpager\u201d. The pager application is defined by the system and will typically support at least pressing a key to scroll. Parameters pager ( Pager , optional ) \u2013 A pager object, or None to use SystemPager . Defaults to None. styles ( bool , optional ) \u2013 Show styles in pager. Defaults to False. links ( bool , optional ) \u2013 Show links in pager. Defaults to False. Return type PagerContext Example >>> from rich.console import Console >>> from rich.__main__ import make_test_card >>> console = Console () >>> with console . pager (): console.print(make_test_card()) Copy to clipboard Returns A context manager. Return type PagerContext Parameters pager ( Optional [ Pager ] ) \u2013 styles ( bool ) \u2013 links ( bool ) \u2013 pop_render_hook ( ) [source] \u00b6 Pop the last renderhook from the stack. Return type None pop_theme ( ) [source] \u00b6 Remove theme from top of stack, restoring previous theme. Return type None print ( * objects , sep = ' ' , end = '\\n' , style = None , justify = None , overflow = None , no_wrap = None , emoji = None , markup = None , highlight = None , width = None , height = None , crop = True , soft_wrap = None , new_line_start = False ) [source] \u00b6 Print to the console. Parameters objects ( positional args ) \u2013 Objects to log to the terminal. sep ( str , optional ) \u2013 String to write between print data. Defaults to \u201d \u201c. end ( str , optional ) \u2013 String to write at end of print data. Defaults to \u201c\\n\u201d. style ( Union [ str , Style ] , optional ) \u2013 A style to apply to output. Defaults to None. justify ( str , optional ) \u2013 Justify method: \u201cdefault\u201d, \u201cleft\u201d, \u201cright\u201d, \u201ccenter\u201d, or \u201cfull\u201d. Defaults to None . overflow ( str , optional ) \u2013 Overflow method: \u201cignore\u201d, \u201ccrop\u201d, \u201cfold\u201d, or \u201cellipsis\u201d. Defaults to None. no_wrap ( Optional [ bool ] , optional ) \u2013 Disable word wrapping. Defaults to None. emoji ( Optional [ bool ] , optional ) \u2013 Enable emoji code, or None to use console default. Defaults to None . markup ( Optional [ bool ] , optional ) \u2013 Enable markup, or None to use console default. Defaults to None . highlight ( Optional [ bool ] , optional ) \u2013 Enable automatic highlighting, or None to use console default. Defaults to None . width ( Optional [ int ] , optional ) \u2013 Width of output, or None to auto-detect. Defaults to None . crop ( Optional [ bool ] , optional ) \u2013 Crop output to width of terminal. Defaults to True. soft_wrap ( bool , optional ) \u2013 Enable soft wrap mode which disables word wrapping and cropping of text or None for Console default. Defaults to None . new_line_start ( bool , False ) \u2013 Insert a new line at the start if the output contains more than one line. Defaults to False . height ( Optional [ int ] ) \u2013 Return type None print_exception ( * , width = 100 , extra_lines = 3 , theme = None , word_wrap = False , show_locals = False , suppress = () , max_frames = 100 ) [source] \u00b6 Prints a rich render of the last exception and traceback. Parameters width ( Optional [ int ] , optional ) \u2013 Number of characters used to render code. Defaults to 100. extra_lines ( int , optional ) \u2013 Additional lines of code to render. Defaults to 3. theme ( str , optional ) \u2013 Override pygments theme used in traceback word_wrap ( bool , optional ) \u2013 Enable word wrapping of long lines. Defaults to False. show_locals ( bool , optional ) \u2013 Enable display of local variables. Defaults to False. suppress ( Iterable [ Union [ str , ModuleType ] ] ) \u2013 Optional sequence of modules or paths to exclude from traceback. max_frames ( int ) \u2013 Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100. Return type None print_json ( json = None , * , data = None , indent = 2 , highlight = True , skip_keys = False , ensure_ascii = False , check_circular = True , allow_nan = True , default = None , sort_keys = False ) [source] \u00b6 Pretty prints JSON. Output will be valid JSON. Parameters json ( Optional [ str ] ) \u2013 A string containing JSON. data ( Any ) \u2013 If json is not supplied, then encode this data. indent ( Union [ None , int , str ] , optional ) \u2013 Number of spaces to indent. Defaults to 2. highlight ( bool , optional ) \u2013 Enable highlighting of output: Defaults to True. skip_keys ( bool , optional ) \u2013 Skip keys not of a basic type. Defaults to False. ensure_ascii ( bool , optional ) \u2013 Escape all non-ascii characters. Defaults to False. check_circular ( bool , optional ) \u2013 Check for circular references. Defaults to True. allow_nan ( bool , optional ) \u2013 Allow NaN and Infinity values. Defaults to True. default ( Callable , optional ) \u2013 A callable that converts values that can not be encoded in to something that can be JSON encoded. Defaults to None. sort_keys ( bool , optional ) \u2013 Sort dictionary keys. Defaults to False. Return type None push_render_hook ( hook ) [source] \u00b6 Add a new render hook to the stack. Parameters hook ( RenderHook ) \u2013 Render hook instance. Return type None push_theme ( theme , * , inherit = True ) [source] \u00b6 Push a new theme on to the top of the stack, replacing the styles from the previous theme. Generally speaking, you should call use_theme() to get a context manager, rather than calling this method directly. Parameters theme ( Theme ) \u2013 A theme instance. inherit ( bool , optional ) \u2013 Inherit existing styles. Defaults to True. Return type None render ( renderable , options = None ) [source] \u00b6 Render an object in to an iterable of Segment instances. This method contains the logic for rendering objects with the console protocol. You are unlikely to need to use it directly, unless you are extending the library. Parameters renderable ( RenderableType ) \u2013 An object supporting the console protocol, or an object that may be converted to a string. options ( ConsoleOptions , optional ) \u2013 An options object, or None to use self.options. Defaults to None. Returns An iterable of segments that may be rendered. Return type Iterable[ Segment ] render_lines ( renderable , options = None , * , style = None , pad = True , new_lines = False ) [source] \u00b6 Render objects in to a list of lines. The output of render_lines is useful when further formatting of rendered console text is required, such as the Panel class which draws a border around any renderable object. Args: renderable (RenderableType): Any object renderable in the console. options (Optional[ConsoleOptions], optional): Console options, or None to use self.options. Default to None . style (Style, optional): Optional style to apply to renderables. Defaults to None . pad (bool, optional): Pad lines shorter than render width. Defaults to True . new_lines (bool, optional): Include \u201c \u201d characters at end of lines. Returns: List[List[Segment]]: A list of lines, where a line is a list of Segment objects. Parameters renderable ( Union [ ConsoleRenderable , RichCast , str ] ) \u2013 options ( Optional [ ConsoleOptions ] ) \u2013 style ( Optional [ Style ] ) \u2013 pad ( bool ) \u2013 new_lines ( bool ) \u2013 Return type List [ List [ Segment ]] render_str ( text , * , style = '' , justify = None , overflow = None , emoji = None , markup = None , highlight = None , highlighter = None ) [source] \u00b6 Convert a string to a Text instance. This is called automatically if you print or log a string. Parameters text ( str ) \u2013 Text to render. style ( Union [ str , Style ] , optional ) \u2013 Style to apply to rendered text. justify ( str , optional ) \u2013 Justify method: \u201cdefault\u201d, \u201cleft\u201d, \u201ccenter\u201d, \u201cfull\u201d, or \u201cright\u201d. Defaults to None . overflow ( str , optional ) \u2013 Overflow method: \u201ccrop\u201d, \u201cfold\u201d, or \u201cellipsis\u201d. Defaults to None . emoji ( Optional [ bool ] , optional ) \u2013 Enable emoji, or None to use Console default. markup ( Optional [ bool ] , optional ) \u2013 Enable markup, or None to use Console default. highlight ( Optional [ bool ] , optional ) \u2013 Enable highlighting, or None to use Console default. highlighter ( HighlighterType , optional ) \u2013 Optional highlighter to apply. Returns Renderable object. Return type ConsoleRenderable rule ( title = '' , * , characters = '\u2500' , style = 'rule.line' , align = 'center' ) [source] \u00b6 Draw a line with optional centered title. Parameters title ( str , optional ) \u2013 Text to render over the rule. Defaults to \u201c\u201d. characters ( str , optional ) \u2013 Character(s) to form the line. Defaults to \u201c\u2500\u201d. style ( str , optional ) \u2013 Style of line. Defaults to \u201crule.line\u201d. align ( str , optional ) \u2013 How to align the title, one of \u201cleft\u201d, \u201ccenter\u201d, or \u201cright\u201d. Defaults to \u201ccenter\u201d. Return type None save_html ( path , * , theme = None , clear = True , code_format = '<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\"UTF-8\">\\n<style>\\n{stylesheet}\\nbody {{\\n color: {foreground};\\n background-color: {background};\\n}}\\n</style>\\n</head>\\n<body>\\n <pre style=\"font-family:Menlo,\\'DejaVu Sans Mono\\',consolas,\\'Courier New\\',monospace\"><code>{code}</code></pre>\\n</body>\\n</html>\\n' , inline_styles = False ) [source] \u00b6 Generate HTML from console contents and write to a file (requires record=True argument in constructor). Parameters path ( str ) \u2013 Path to write html file. theme ( TerminalTheme , optional ) \u2013 TerminalTheme object containing console colors. clear ( bool , optional ) \u2013 Clear record buffer after exporting. Defaults to True . code_format ( str , optional ) \u2013 Format string to render HTML. In addition to \u2018{foreground}\u2019, \u2018{background}\u2019, and \u2018{code}\u2019, should contain \u2018{stylesheet}\u2019 if inline_styles is False . inline_styles ( bool , optional ) \u2013 If True styles will be inlined in to spans, which makes files larger but easier to cut and paste markup. If False , styles will be embedded in a style tag. Defaults to False. Return type None save_svg ( path , * , title = 'Rich' , theme = None , clear = True , code_format = '<svg class=\"rich-terminal\" viewBox=\"0 0 {width} {height}\" xmlns=\"http://www.w3.org/2000/svg\">\\n <!-- Generated with Rich https://www.textualize.io -->\\n <style>\\n\\n @font-face {{\\n font-family: \"Fira Code\";\\n src: local(\"FiraCode-Regular\"),\\n url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),\\n url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");\\n font-style: normal;\\n font-weight: 400;\\n }}\\n @font-face {{\\n font-family: \"Fira Code\";\\n src: local(\"FiraCode-Bold\"),\\n url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),\\n url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");\\n font-style: bold;\\n font-weight: 700;\\n }}\\n\\n .{unique_id}-matrix {{\\n font-family: Fira Code, monospace;\\n font-size: {char_height}px;\\n line-height: {line_height}px;\\n font-variant-east-asian: full-width;\\n }}\\n\\n .{unique_id}-title {{\\n font-size: 18px;\\n font-weight: bold;\\n font-family: arial;\\n }}\\n\\n {styles}\\n </style>\\n\\n <defs>\\n <clipPath id=\"{unique_id}-clip-terminal\">\\n <rect x=\"0\" y=\"0\" width=\"{terminal_width}\" height=\"{terminal_height}\" />\\n </clipPath>\\n {lines}\\n </defs>\\n\\n {chrome}\\n <g transform=\"translate({terminal_x}, {terminal_y})\" clip-path=\"url(#{unique_id}-clip-terminal)\">\\n {backgrounds}\\n <g class=\"{unique_id}-matrix\">\\n {matrix}\\n </g>\\n </g>\\n</svg>\\n' , font_aspect_ratio = 0.61 , unique_id = None ) [source] \u00b6 Generate an SVG file from the console contents (requires record=True in Console constructor). Parameters path ( str ) \u2013 The path to write the SVG to. title ( str , optional ) \u2013 The title of the tab in the output image theme ( TerminalTheme , optional ) \u2013 The TerminalTheme object to use to style the terminal clear ( bool , optional ) \u2013 Clear record buffer after exporting. Defaults to True code_format ( str , optional ) \u2013 Format string used to generate the SVG. Rich will inject a number of variables into the string in order to form the final SVG output. The default template used and the variables injected by Rich can be found by inspecting the console.CONSOLE_SVG_FORMAT variable. font_aspect_ratio ( float , optional ) \u2013 The width to height ratio of the font used in the code_format string. Defaults to 0.61, which is the width to height ratio of Fira Code (the default font). If you aren\u2019t specifying a different font inside code_format , you probably don\u2019t need this. unique_id ( str , optional ) \u2013 unique id that is used as the prefix for various elements (CSS styles, node ids). If not set, this defaults to a computed value based on the recorded content. Return type None save_text ( path , * , clear = True , styles = False ) [source] \u00b6 Generate text from console and save to a given location (requires record=True argument in constructor). Parameters path ( str ) \u2013 Path to write text files. clear ( bool , optional ) \u2013 Clear record buffer after exporting. Defaults to True . styles ( bool , optional ) \u2013 If True , ansi style codes will be included. False for plain text. Defaults to False . Return type None screen ( hide_cursor = True , style = None ) [source] \u00b6 Context manager to enable and disable \u2018alternative screen\u2019 mode. Parameters hide_cursor ( bool , optional ) \u2013 Also hide the cursor. Defaults to False. style ( Style , optional ) \u2013 Optional style for screen. Defaults to None. Returns Context which enables alternate screen on enter, and disables it on exit. Return type ~ScreenContext set_alt_screen ( enable = True ) [source] \u00b6 Enables alternative screen mode. Note, if you enable this mode, you should ensure that is disabled before the application exits. See screen() for a context manager that handles this for you. Parameters enable ( bool , optional ) \u2013 Enable (True) or disable (False) alternate screen. Defaults to True. Returns True if the control codes were written. Return type bool set_live ( live ) [source] \u00b6 Set Live instance. Used by Live context manager. Parameters live ( Live ) \u2013 Live instance using this Console. Raises errors.LiveError \u2013 If this Console has a Live context currently active. Return type None set_window_title ( title ) [source] \u00b6 Set the title of the console terminal window. Warning: There is no means within Rich of \u201cresetting\u201d the window title to its previous value, meaning the title you set will persist even after your application exits. fish shell resets the window title before and after each command by default, negating this issue. Windows Terminal and command prompt will also reset the title for you. Most other shells and terminals, however, do not do this. Some terminals may require configuration changes before you can set the title. Some terminals may not support setting the title at all. Other software (including the terminal itself, the shell, custom prompts, plugins, etc.) may also set the terminal window title. This could result in whatever value you write using this method being overwritten. Parameters title ( str ) \u2013 The new title of the terminal window. Returns True if the control code to change the terminal title was written, otherwise False. Note that a return value of True does not guarantee that the window title has actually changed, since the feature may be unsupported/disabled in some terminals. Return type bool show_cursor ( show = True ) [source] \u00b6 Show or hide the cursor. Parameters show ( bool , optional ) \u2013 Set visibility of the cursor. Return type bool property size : ConsoleDimensions \u00b6 Get the size of the console. Returns A named tuple containing the dimensions. Return type ConsoleDimensions status ( status , * , spinner = 'dots' , spinner_style = 'status.spinner' , speed = 1.0 , refresh_per_second = 12.5 ) [source] \u00b6 Display a status and spinner. Parameters status ( RenderableType ) \u2013 A status renderable (str or Text typically). spinner ( str , optional ) \u2013 Name of spinner animation (see python -m rich.spinner). Defaults to \u201cdots\u201d. spinner_style ( StyleType , optional ) \u2013 Style of spinner. Defaults to \u201cstatus.spinner\u201d. speed ( float , optional ) \u2013 Speed factor for spinner animation. Defaults to 1.0. refresh_per_second ( float , optional ) \u2013 Number of refreshes per second. Defaults to 12.5. Returns A Status object that may be used as a context manager. Return type Status update_screen ( renderable , * , region = None , options = None ) [source] \u00b6 Update the screen at a given offset. Parameters renderable ( RenderableType ) \u2013 A Rich renderable. region ( Region , optional ) \u2013 Region of screen to update, or None for entire screen. Defaults to None. x ( int , optional ) \u2013 x offset. Defaults to 0. y ( int , optional ) \u2013 y offset. Defaults to 0. options ( Optional [ ConsoleOptions ] ) \u2013 Raises errors.NoAltScreen \u2013 If the Console isn\u2019t in alt screen mode. Return type None update_screen_lines ( lines , x = 0 , y = 0 ) [source] \u00b6 Update lines of the screen at a given offset. Parameters lines ( List [ List [ Segment ] ] ) \u2013 Rendered lines (as produced by render_lines() ). x ( int , optional ) \u2013 x offset (column no). Defaults to 0. y ( int , optional ) \u2013 y offset (column no). Defaults to 0. Raises errors.NoAltScreen \u2013 If the Console isn\u2019t in alt screen mode. Return type None use_theme ( theme , * , inherit = True ) [source] \u00b6 Use a different theme for the duration of the context manager. Parameters theme ( Theme ) \u2013 Theme instance to user. inherit ( bool , optional ) \u2013 Inherit existing console styles. Defaults to True. Returns [description] Return type ThemeContext property width : int \u00b6 Get the width of the console. Returns The width (in characters) of the console. Return type int ```","title":"Console"},{"location":"console_ref/#console","text":"class maxgradient.console. Console ( * , color_system='auto' , force_terminal=None , force_jupyter=None , force_interactive=None , soft_wrap=False , theme=None , stderr=False , file=None , quiet=False , width=None , height=None , style=None , no_color=None , tab_size=4 , record=False , markup=True , emoji=True , emoji_variant=None , highlight=True , log_time=True , log_path=True , log_time_format='[%X]' , highlighter=None() , legacy_windows=None , safe_box=True , get_datetime=None , get_time=None , traceback=None , _environ=None ) [source] \u00b6 A custom-themed high level interface for the Console class that inherits from rich.console.Console. This class is a singleton which removes the need to pass around a console object or use the `get_console` method. Parameters color_system ( str , optional ) \u2013 The color system supported by your terminal. Valid values are: \"auto\", \"standard\", \"256\", \"truecolor\", Leave as \"auto\" to autodetect. force_terminal ( Optional [ bool ] , optional ) \u2013 Enable/disable terminal control codes, or None to auto-detect terminal. Defaults to None. force_jupyter ( Optional [ bool ] , optional ) \u2013 Enable/disable Jupyter rendering, or None to auto-detect Jupyter. Defaults to None. force_interactive ( Optional [ bool ] , optional ) \u2013 Enable/disable interactive mode, or None to auto detect. Defaults to None. soft_wrap ( Optional [ bool ] , optional ) \u2013 Set soft wrap default on print method. Defaults to False. theme ( Theme , optional ) \u2013 An optional style theme object, or None for default theme, GradientTheme() stderr ( bool , optional ) \u2013 Use stderr rather than stdout if `file` is not specified. Defaults to False. file ( IO , optional ) \u2013 A file object where the console should write to. Defaults to stdout. quiet ( bool , Optional ) \u2013 Boolean to suppress all output. Defaults to False. width ( int , optional ) \u2013 The width of the terminal. Leave as default to auto-detect width. height ( int , optional ) \u2013 The height of the terminal. Leave as default to auto-detect height. style ( StyleType , optional ) \u2013 Style to apply to all output, or None for no style. Defaults to None. no_color ( Optional [ bool ] , optional ) \u2013 Enabled no color mode, or None to auto detect. Defaults to None. tab_size ( int , optional ) \u2013 Number of spaces used to replace a tab character. Defaults to 4. record ( bool , optional ) \u2013 Boolean to enable recording of terminal output, required to call export_html() , export_svg() , and export_text() . Defaults to False. markup ( bool , optional ) \u2013 Boolean to enable Console Markup . Defaults to True. emoji ( bool , optional ) \u2013 Enable emoji code. Defaults to True. emoji_variant ( str , optional ) \u2013 Optional emoji variant, either \u201ctext\u201d or \u201cemoji\u201d. Defaults to None. highlight ( bool , optional ) \u2013 Enable automatic highlighting. Defaults to True. log_time ( bool , optional ) \u2013 Boolean to enable logging of time by log() methods. Defaults to True. log_path ( bool , optional ) \u2013 Boolean to enable the logging of the caller by log() . Defaults to True. log_time_format ( Union [ str , TimeFormatterCallable ] , optional ) \u2013 If `log_time` is enabled, either string for strftime or callable that formats the time. Defaults to \u201c[%X] \u201c. highlighter ( HighlighterType , optional ) \u2013 Default highlighter. legacy_windows ( bool , optional ) \u2013 Enable legacy Windows mode, or `None` to auto detect. Defaults to `None`. safe_box ( bool , optional ) \u2013 Restrict box options that don\u2019t render on legacy Windows. get_datetime ( Callable [ [ ] , datetime ] , optional ) \u2013 Callable that gets the current time as a datetime.datetime object (used by Console.log), or None for datetime.now. get_time ( Callable [ [ ] , time ] , optional ) \u2013 Callable that gets the current time in seconds, default uses time.monotonic. _environ ( Mapping [ str , str ] ) \u2013 begin_capture ( ) [source] \u00b6 Begin capturing console output. Call end_capture() to exit capture mode and return output. Return type None bell ( ) [source] \u00b6 Play a \u2018bell\u2019 sound (if supported by the terminal). Return type None capture ( ) [source] \u00b6 A context manager to capture the result of print() or log() in a string, rather than writing it to the console. Example >>> from rich.console import Console >>> console = Console () >>> with console . capture () as capture : ... console . print ( \"[bold magenta]Hello World[/]\" ) >>> print ( capture . get ()) Copy to clipboard Returns Context manager with disables writing to the terminal. Return type Capture clear ( home = True ) [source] \u00b6 Clear the screen. Parameters home ( bool , optional ) \u2013 Also move the cursor to \u2018home\u2019 position. Defaults to True. Return type None clear_live ( ) [source] \u00b6 Clear the Live instance. Return type None property color_system : Optional [ str ] \u00b6 Get color system string. Returns \u201cstandard\u201d, \u201c256\u201d or \u201ctruecolor\u201d. Return type Optional[ str ] control ( * control ) [source] \u00b6 Insert non-printing control codes. Parameters control_codes ( str ) \u2013 Control codes, such as those that may move the cursor. control ( Control ) \u2013 Return type None property encoding : str \u00b6 Get the encoding of the console file, e.g. \"utf-8\" . Returns A standard encoding string. Return type str end_capture ( ) [source] \u00b6 End capture mode and return captured string. Returns Console output. Return type str export_html ( * , theme = None , clear = True , code_format = None , inline_styles = False ) [source] \u00b6 Generate HTML from console contents (requires record=True argument in constructor). Parameters theme ( TerminalTheme , optional ) \u2013 TerminalTheme object containing console colors. clear ( bool , optional ) \u2013 Clear record buffer after exporting. Defaults to True . code_format ( str , optional ) \u2013 Format string to render HTML. In addition to \u2018{foreground}\u2019, \u2018{background}\u2019, and \u2018{code}\u2019, should contain \u2018{stylesheet}\u2019 if inline_styles is False . inline_styles ( bool , optional ) \u2013 If True styles will be inlined in to spans, which makes files larger but easier to cut and paste markup. If False , styles will be embedded in a style tag. Defaults to False. Returns String containing console contents as HTML. Return type str export_svg ( * , title = 'Rich' , theme = None , clear = True , code_format = '<svg class=\"rich-terminal\" viewBox=\"0 0 {width} {height}\" xmlns=\"http://www.w3.org/2000/svg\">\\n <!-- Generated with Rich https://www.textualize.io -->\\n <style>\\n\\n @font-face {{\\n font-family: \"Fira Code\";\\n src: local(\"FiraCode-Regular\"),\\n url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),\\n url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");\\n font-style: normal;\\n font-weight: 400;\\n }}\\n @font-face {{\\n font-family: \"Fira Code\";\\n src: local(\"FiraCode-Bold\"),\\n url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),\\n url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");\\n font-style: bold;\\n font-weight: 700;\\n }}\\n\\n .{unique_id}-matrix {{\\n font-family: Fira Code, monospace;\\n font-size: {char_height}px;\\n line-height: {line_height}px;\\n font-variant-east-asian: full-width;\\n }}\\n\\n .{unique_id}-title {{\\n font-size: 18px;\\n font-weight: bold;\\n font-family: arial;\\n }}\\n\\n {styles}\\n </style>\\n\\n <defs>\\n <clipPath id=\"{unique_id}-clip-terminal\">\\n <rect x=\"0\" y=\"0\" width=\"{terminal_width}\" height=\"{terminal_height}\" />\\n </clipPath>\\n {lines}\\n </defs>\\n\\n {chrome}\\n <g transform=\"translate({terminal_x}, {terminal_y})\" clip-path=\"url(#{unique_id}-clip-terminal)\">\\n {backgrounds}\\n <g class=\"{unique_id}-matrix\">\\n {matrix}\\n </g>\\n </g>\\n</svg>\\n' , font_aspect_ratio = 0.61 , unique_id = None ) [source] \u00b6 Generate an SVG from the console contents (requires record=True in Console constructor). Parameters title ( str , optional ) \u2013 The title of the tab in the output image theme ( TerminalTheme , optional ) \u2013 The TerminalTheme object to use to style the terminal clear ( bool , optional ) \u2013 Clear record buffer after exporting. Defaults to True code_format ( str , optional ) \u2013 Format string used to generate the SVG. Rich will inject a number of variables into the string in order to form the final SVG output. The default template used and the variables injected by Rich can be found by inspecting the console.CONSOLE_SVG_FORMAT variable. font_aspect_ratio ( float , optional ) \u2013 The width to height ratio of the font used in the code_format string. Defaults to 0.61, which is the width to height ratio of Fira Code (the default font). If you aren\u2019t specifying a different font inside code_format , you probably don\u2019t need this. unique_id ( str , optional ) \u2013 unique id that is used as the prefix for various elements (CSS styles, node ids). If not set, this defaults to a computed value based on the recorded content. Return type str export_text ( * , clear = True , styles = False ) [source] \u00b6 Generate text from console contents (requires record=True argument in constructor). Parameters clear ( bool , optional ) \u2013 Clear record buffer after exporting. Defaults to True . styles ( bool , optional ) \u2013 If True , ansi escape codes will be included. False for plain text. Defaults to False . Returns String containing console contents. Return type str property file : IO [ str ] \u00b6 Get the file object to write to. get_style ( name , * , default = None ) [source] \u00b6 Get a Style instance by its theme name or parse a definition. Parameters name ( str ) \u2013 The name of a style or a style definition. default ( Optional [ Union [ str , Style ] ] ) \u2013 Returns A Style object. Return type Style Raises MissingStyle \u2013 If no style could be parsed from name. property height : int \u00b6 Get the height of the console. Returns The height (in lines) of the console. Return type int input ( prompt = '' , * , markup = True , emoji = True , password = False , stream = None ) [source] \u00b6 Displays a prompt and waits for input from the user. The prompt may contain color / style. It works in the same way as Python\u2019s builtin input() function and provides elaborate line editing and history features if Python\u2019s builtin readline module is previously loaded. Parameters prompt ( Union [ str , Text ] ) \u2013 Text to render in the prompt. markup ( bool , optional ) \u2013 Enable console markup (requires a str prompt). Defaults to True. emoji ( bool , optional ) \u2013 Enable emoji (requires a str prompt). Defaults to True. password ( bool ) \u2013 (bool, optional): Hide typed text. Defaults to False. stream ( Optional [ TextIO ] ) \u2013 (TextIO, optional): Optional file to read input from (rather than stdin). Defaults to None. Returns Text read from stdin. Return type str property is_alt_screen : bool \u00b6 Check if the alt screen was enabled. Returns True if the alt screen was enabled, otherwise False. Return type bool property is_dumb_terminal : bool \u00b6 Detect dumb terminal. Returns True if writing to a dumb terminal, otherwise False. Return type bool property is_terminal : bool \u00b6 Check if the console is writing to a terminal. Returns True if the console writing to a device capable of understanding terminal codes, otherwise False. Return type bool line ( count = 1 ) [source] \u00b6 Write new line(s). Parameters count ( int , optional ) \u2013 Number of new lines. Defaults to 1. Return type None log ( * objects , sep = ' ' , end = '\\n' , style = None , justify = None , emoji = None , markup = None , highlight = None , log_locals = False , _stack_offset = 1 ) [source] \u00b6 Log rich content to the terminal. Parameters objects ( positional args ) \u2013 Objects to log to the terminal. sep ( str , optional ) \u2013 String to write between print data. Defaults to \u201d \u201c. end ( str , optional ) \u2013 String to write at end of print data. Defaults to \u201c\\n\u201d. style ( Union [ str , Style ] , optional ) \u2013 A style to apply to output. Defaults to None. justify ( str , optional ) \u2013 One of \u201cleft\u201d, \u201cright\u201d, \u201ccenter\u201d, or \u201cfull\u201d. Defaults to None . emoji ( Optional [ bool ] , optional ) \u2013 Enable emoji code, or None to use console default. Defaults to None. markup ( Optional [ bool ] , optional ) \u2013 Enable markup, or None to use console default. Defaults to None. highlight ( Optional [ bool ] , optional ) \u2013 Enable automatic highlighting, or None to use console default. Defaults to None. log_locals ( bool , optional ) \u2013 Boolean to enable logging of locals where log() was called. Defaults to False. _stack_offset ( int , optional ) \u2013 Offset of caller from end of call stack. Defaults to 1. Return type None measure ( renderable , * , options = None ) [source] \u00b6 Measure a renderable. Returns a Measurement object which contains information regarding the number of characters required to print the renderable. Parameters renderable ( RenderableType ) \u2013 Any renderable or string. options ( Optional [ ConsoleOptions ] , optional ) \u2013 Options to use when measuring, or None to use default options. Defaults to None. Returns A measurement of the renderable. Return type Measurement property options : ConsoleOptions \u00b6 Get default console options. out ( * objects , sep = ' ' , end = '\\n' , style = None , highlight = None ) [source] \u00b6 Output to the terminal. This is a low-level way of writing to the terminal which unlike print() won\u2019t pretty print, wrap text, or apply markup, but will optionally apply highlighting and a basic style. Parameters sep ( str , optional ) \u2013 String to write between print data. Defaults to \u201d \u201c. end ( str , optional ) \u2013 String to write at end of print data. Defaults to \u201c\\n\u201d. style ( Union [ str , Style ] , optional ) \u2013 A style to apply to output. Defaults to None. highlight ( Optional [ bool ] , optional ) \u2013 Enable automatic highlighting, or None to use console default. Defaults to None . objects ( Any ) \u2013 Return type None pager ( pager = None , styles = False , links = False ) [source] \u00b6 A context manager to display anything printed within a \u201cpager\u201d. The pager application is defined by the system and will typically support at least pressing a key to scroll. Parameters pager ( Pager , optional ) \u2013 A pager object, or None to use SystemPager . Defaults to None. styles ( bool , optional ) \u2013 Show styles in pager. Defaults to False. links ( bool , optional ) \u2013 Show links in pager. Defaults to False. Return type PagerContext Example >>> from rich.console import Console >>> from rich.__main__ import make_test_card >>> console = Console () >>> with console . pager (): console.print(make_test_card()) Copy to clipboard Returns A context manager. Return type PagerContext Parameters pager ( Optional [ Pager ] ) \u2013 styles ( bool ) \u2013 links ( bool ) \u2013 pop_render_hook ( ) [source] \u00b6 Pop the last renderhook from the stack. Return type None pop_theme ( ) [source] \u00b6 Remove theme from top of stack, restoring previous theme. Return type None print ( * objects , sep = ' ' , end = '\\n' , style = None , justify = None , overflow = None , no_wrap = None , emoji = None , markup = None , highlight = None , width = None , height = None , crop = True , soft_wrap = None , new_line_start = False ) [source] \u00b6 Print to the console. Parameters objects ( positional args ) \u2013 Objects to log to the terminal. sep ( str , optional ) \u2013 String to write between print data. Defaults to \u201d \u201c. end ( str , optional ) \u2013 String to write at end of print data. Defaults to \u201c\\n\u201d. style ( Union [ str , Style ] , optional ) \u2013 A style to apply to output. Defaults to None. justify ( str , optional ) \u2013 Justify method: \u201cdefault\u201d, \u201cleft\u201d, \u201cright\u201d, \u201ccenter\u201d, or \u201cfull\u201d. Defaults to None . overflow ( str , optional ) \u2013 Overflow method: \u201cignore\u201d, \u201ccrop\u201d, \u201cfold\u201d, or \u201cellipsis\u201d. Defaults to None. no_wrap ( Optional [ bool ] , optional ) \u2013 Disable word wrapping. Defaults to None. emoji ( Optional [ bool ] , optional ) \u2013 Enable emoji code, or None to use console default. Defaults to None . markup ( Optional [ bool ] , optional ) \u2013 Enable markup, or None to use console default. Defaults to None . highlight ( Optional [ bool ] , optional ) \u2013 Enable automatic highlighting, or None to use console default. Defaults to None . width ( Optional [ int ] , optional ) \u2013 Width of output, or None to auto-detect. Defaults to None . crop ( Optional [ bool ] , optional ) \u2013 Crop output to width of terminal. Defaults to True. soft_wrap ( bool , optional ) \u2013 Enable soft wrap mode which disables word wrapping and cropping of text or None for Console default. Defaults to None . new_line_start ( bool , False ) \u2013 Insert a new line at the start if the output contains more than one line. Defaults to False . height ( Optional [ int ] ) \u2013 Return type None print_exception ( * , width = 100 , extra_lines = 3 , theme = None , word_wrap = False , show_locals = False , suppress = () , max_frames = 100 ) [source] \u00b6 Prints a rich render of the last exception and traceback. Parameters width ( Optional [ int ] , optional ) \u2013 Number of characters used to render code. Defaults to 100. extra_lines ( int , optional ) \u2013 Additional lines of code to render. Defaults to 3. theme ( str , optional ) \u2013 Override pygments theme used in traceback word_wrap ( bool , optional ) \u2013 Enable word wrapping of long lines. Defaults to False. show_locals ( bool , optional ) \u2013 Enable display of local variables. Defaults to False. suppress ( Iterable [ Union [ str , ModuleType ] ] ) \u2013 Optional sequence of modules or paths to exclude from traceback. max_frames ( int ) \u2013 Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100. Return type None print_json ( json = None , * , data = None , indent = 2 , highlight = True , skip_keys = False , ensure_ascii = False , check_circular = True , allow_nan = True , default = None , sort_keys = False ) [source] \u00b6 Pretty prints JSON. Output will be valid JSON. Parameters json ( Optional [ str ] ) \u2013 A string containing JSON. data ( Any ) \u2013 If json is not supplied, then encode this data. indent ( Union [ None , int , str ] , optional ) \u2013 Number of spaces to indent. Defaults to 2. highlight ( bool , optional ) \u2013 Enable highlighting of output: Defaults to True. skip_keys ( bool , optional ) \u2013 Skip keys not of a basic type. Defaults to False. ensure_ascii ( bool , optional ) \u2013 Escape all non-ascii characters. Defaults to False. check_circular ( bool , optional ) \u2013 Check for circular references. Defaults to True. allow_nan ( bool , optional ) \u2013 Allow NaN and Infinity values. Defaults to True. default ( Callable , optional ) \u2013 A callable that converts values that can not be encoded in to something that can be JSON encoded. Defaults to None. sort_keys ( bool , optional ) \u2013 Sort dictionary keys. Defaults to False. Return type None push_render_hook ( hook ) [source] \u00b6 Add a new render hook to the stack. Parameters hook ( RenderHook ) \u2013 Render hook instance. Return type None push_theme ( theme , * , inherit = True ) [source] \u00b6 Push a new theme on to the top of the stack, replacing the styles from the previous theme. Generally speaking, you should call use_theme() to get a context manager, rather than calling this method directly. Parameters theme ( Theme ) \u2013 A theme instance. inherit ( bool , optional ) \u2013 Inherit existing styles. Defaults to True. Return type None render ( renderable , options = None ) [source] \u00b6 Render an object in to an iterable of Segment instances. This method contains the logic for rendering objects with the console protocol. You are unlikely to need to use it directly, unless you are extending the library. Parameters renderable ( RenderableType ) \u2013 An object supporting the console protocol, or an object that may be converted to a string. options ( ConsoleOptions , optional ) \u2013 An options object, or None to use self.options. Defaults to None. Returns An iterable of segments that may be rendered. Return type Iterable[ Segment ] render_lines ( renderable , options = None , * , style = None , pad = True , new_lines = False ) [source] \u00b6 Render objects in to a list of lines. The output of render_lines is useful when further formatting of rendered console text is required, such as the Panel class which draws a border around any renderable object. Args: renderable (RenderableType): Any object renderable in the console. options (Optional[ConsoleOptions], optional): Console options, or None to use self.options. Default to None . style (Style, optional): Optional style to apply to renderables. Defaults to None . pad (bool, optional): Pad lines shorter than render width. Defaults to True . new_lines (bool, optional): Include \u201c \u201d characters at end of lines. Returns: List[List[Segment]]: A list of lines, where a line is a list of Segment objects. Parameters renderable ( Union [ ConsoleRenderable , RichCast , str ] ) \u2013 options ( Optional [ ConsoleOptions ] ) \u2013 style ( Optional [ Style ] ) \u2013 pad ( bool ) \u2013 new_lines ( bool ) \u2013 Return type List [ List [ Segment ]] render_str ( text , * , style = '' , justify = None , overflow = None , emoji = None , markup = None , highlight = None , highlighter = None ) [source] \u00b6 Convert a string to a Text instance. This is called automatically if you print or log a string. Parameters text ( str ) \u2013 Text to render. style ( Union [ str , Style ] , optional ) \u2013 Style to apply to rendered text. justify ( str , optional ) \u2013 Justify method: \u201cdefault\u201d, \u201cleft\u201d, \u201ccenter\u201d, \u201cfull\u201d, or \u201cright\u201d. Defaults to None . overflow ( str , optional ) \u2013 Overflow method: \u201ccrop\u201d, \u201cfold\u201d, or \u201cellipsis\u201d. Defaults to None . emoji ( Optional [ bool ] , optional ) \u2013 Enable emoji, or None to use Console default. markup ( Optional [ bool ] , optional ) \u2013 Enable markup, or None to use Console default. highlight ( Optional [ bool ] , optional ) \u2013 Enable highlighting, or None to use Console default. highlighter ( HighlighterType , optional ) \u2013 Optional highlighter to apply. Returns Renderable object. Return type ConsoleRenderable rule ( title = '' , * , characters = '\u2500' , style = 'rule.line' , align = 'center' ) [source] \u00b6 Draw a line with optional centered title. Parameters title ( str , optional ) \u2013 Text to render over the rule. Defaults to \u201c\u201d. characters ( str , optional ) \u2013 Character(s) to form the line. Defaults to \u201c\u2500\u201d. style ( str , optional ) \u2013 Style of line. Defaults to \u201crule.line\u201d. align ( str , optional ) \u2013 How to align the title, one of \u201cleft\u201d, \u201ccenter\u201d, or \u201cright\u201d. Defaults to \u201ccenter\u201d. Return type None save_html ( path , * , theme = None , clear = True , code_format = '<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\"UTF-8\">\\n<style>\\n{stylesheet}\\nbody {{\\n color: {foreground};\\n background-color: {background};\\n}}\\n</style>\\n</head>\\n<body>\\n <pre style=\"font-family:Menlo,\\'DejaVu Sans Mono\\',consolas,\\'Courier New\\',monospace\"><code>{code}</code></pre>\\n</body>\\n</html>\\n' , inline_styles = False ) [source] \u00b6 Generate HTML from console contents and write to a file (requires record=True argument in constructor). Parameters path ( str ) \u2013 Path to write html file. theme ( TerminalTheme , optional ) \u2013 TerminalTheme object containing console colors. clear ( bool , optional ) \u2013 Clear record buffer after exporting. Defaults to True . code_format ( str , optional ) \u2013 Format string to render HTML. In addition to \u2018{foreground}\u2019, \u2018{background}\u2019, and \u2018{code}\u2019, should contain \u2018{stylesheet}\u2019 if inline_styles is False . inline_styles ( bool , optional ) \u2013 If True styles will be inlined in to spans, which makes files larger but easier to cut and paste markup. If False , styles will be embedded in a style tag. Defaults to False. Return type None save_svg ( path , * , title = 'Rich' , theme = None , clear = True , code_format = '<svg class=\"rich-terminal\" viewBox=\"0 0 {width} {height}\" xmlns=\"http://www.w3.org/2000/svg\">\\n <!-- Generated with Rich https://www.textualize.io -->\\n <style>\\n\\n @font-face {{\\n font-family: \"Fira Code\";\\n src: local(\"FiraCode-Regular\"),\\n url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),\\n url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");\\n font-style: normal;\\n font-weight: 400;\\n }}\\n @font-face {{\\n font-family: \"Fira Code\";\\n src: local(\"FiraCode-Bold\"),\\n url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),\\n url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");\\n font-style: bold;\\n font-weight: 700;\\n }}\\n\\n .{unique_id}-matrix {{\\n font-family: Fira Code, monospace;\\n font-size: {char_height}px;\\n line-height: {line_height}px;\\n font-variant-east-asian: full-width;\\n }}\\n\\n .{unique_id}-title {{\\n font-size: 18px;\\n font-weight: bold;\\n font-family: arial;\\n }}\\n\\n {styles}\\n </style>\\n\\n <defs>\\n <clipPath id=\"{unique_id}-clip-terminal\">\\n <rect x=\"0\" y=\"0\" width=\"{terminal_width}\" height=\"{terminal_height}\" />\\n </clipPath>\\n {lines}\\n </defs>\\n\\n {chrome}\\n <g transform=\"translate({terminal_x}, {terminal_y})\" clip-path=\"url(#{unique_id}-clip-terminal)\">\\n {backgrounds}\\n <g class=\"{unique_id}-matrix\">\\n {matrix}\\n </g>\\n </g>\\n</svg>\\n' , font_aspect_ratio = 0.61 , unique_id = None ) [source] \u00b6 Generate an SVG file from the console contents (requires record=True in Console constructor). Parameters path ( str ) \u2013 The path to write the SVG to. title ( str , optional ) \u2013 The title of the tab in the output image theme ( TerminalTheme , optional ) \u2013 The TerminalTheme object to use to style the terminal clear ( bool , optional ) \u2013 Clear record buffer after exporting. Defaults to True code_format ( str , optional ) \u2013 Format string used to generate the SVG. Rich will inject a number of variables into the string in order to form the final SVG output. The default template used and the variables injected by Rich can be found by inspecting the console.CONSOLE_SVG_FORMAT variable. font_aspect_ratio ( float , optional ) \u2013 The width to height ratio of the font used in the code_format string. Defaults to 0.61, which is the width to height ratio of Fira Code (the default font). If you aren\u2019t specifying a different font inside code_format , you probably don\u2019t need this. unique_id ( str , optional ) \u2013 unique id that is used as the prefix for various elements (CSS styles, node ids). If not set, this defaults to a computed value based on the recorded content. Return type None save_text ( path , * , clear = True , styles = False ) [source] \u00b6 Generate text from console and save to a given location (requires record=True argument in constructor). Parameters path ( str ) \u2013 Path to write text files. clear ( bool , optional ) \u2013 Clear record buffer after exporting. Defaults to True . styles ( bool , optional ) \u2013 If True , ansi style codes will be included. False for plain text. Defaults to False . Return type None screen ( hide_cursor = True , style = None ) [source] \u00b6 Context manager to enable and disable \u2018alternative screen\u2019 mode. Parameters hide_cursor ( bool , optional ) \u2013 Also hide the cursor. Defaults to False. style ( Style , optional ) \u2013 Optional style for screen. Defaults to None. Returns Context which enables alternate screen on enter, and disables it on exit. Return type ~ScreenContext set_alt_screen ( enable = True ) [source] \u00b6 Enables alternative screen mode. Note, if you enable this mode, you should ensure that is disabled before the application exits. See screen() for a context manager that handles this for you. Parameters enable ( bool , optional ) \u2013 Enable (True) or disable (False) alternate screen. Defaults to True. Returns True if the control codes were written. Return type bool set_live ( live ) [source] \u00b6 Set Live instance. Used by Live context manager. Parameters live ( Live ) \u2013 Live instance using this Console. Raises errors.LiveError \u2013 If this Console has a Live context currently active. Return type None set_window_title ( title ) [source] \u00b6 Set the title of the console terminal window. Warning: There is no means within Rich of \u201cresetting\u201d the window title to its previous value, meaning the title you set will persist even after your application exits. fish shell resets the window title before and after each command by default, negating this issue. Windows Terminal and command prompt will also reset the title for you. Most other shells and terminals, however, do not do this. Some terminals may require configuration changes before you can set the title. Some terminals may not support setting the title at all. Other software (including the terminal itself, the shell, custom prompts, plugins, etc.) may also set the terminal window title. This could result in whatever value you write using this method being overwritten. Parameters title ( str ) \u2013 The new title of the terminal window. Returns True if the control code to change the terminal title was written, otherwise False. Note that a return value of True does not guarantee that the window title has actually changed, since the feature may be unsupported/disabled in some terminals. Return type bool show_cursor ( show = True ) [source] \u00b6 Show or hide the cursor. Parameters show ( bool , optional ) \u2013 Set visibility of the cursor. Return type bool property size : ConsoleDimensions \u00b6 Get the size of the console. Returns A named tuple containing the dimensions. Return type ConsoleDimensions status ( status , * , spinner = 'dots' , spinner_style = 'status.spinner' , speed = 1.0 , refresh_per_second = 12.5 ) [source] \u00b6 Display a status and spinner. Parameters status ( RenderableType ) \u2013 A status renderable (str or Text typically). spinner ( str , optional ) \u2013 Name of spinner animation (see python -m rich.spinner). Defaults to \u201cdots\u201d. spinner_style ( StyleType , optional ) \u2013 Style of spinner. Defaults to \u201cstatus.spinner\u201d. speed ( float , optional ) \u2013 Speed factor for spinner animation. Defaults to 1.0. refresh_per_second ( float , optional ) \u2013 Number of refreshes per second. Defaults to 12.5. Returns A Status object that may be used as a context manager. Return type Status update_screen ( renderable , * , region = None , options = None ) [source] \u00b6 Update the screen at a given offset. Parameters renderable ( RenderableType ) \u2013 A Rich renderable. region ( Region , optional ) \u2013 Region of screen to update, or None for entire screen. Defaults to None. x ( int , optional ) \u2013 x offset. Defaults to 0. y ( int , optional ) \u2013 y offset. Defaults to 0. options ( Optional [ ConsoleOptions ] ) \u2013 Raises errors.NoAltScreen \u2013 If the Console isn\u2019t in alt screen mode. Return type None update_screen_lines ( lines , x = 0 , y = 0 ) [source] \u00b6 Update lines of the screen at a given offset. Parameters lines ( List [ List [ Segment ] ] ) \u2013 Rendered lines (as produced by render_lines() ). x ( int , optional ) \u2013 x offset (column no). Defaults to 0. y ( int , optional ) \u2013 y offset (column no). Defaults to 0. Raises errors.NoAltScreen \u2013 If the Console isn\u2019t in alt screen mode. Return type None use_theme ( theme , * , inherit = True ) [source] \u00b6 Use a different theme for the duration of the context manager. Parameters theme ( Theme ) \u2013 Theme instance to user. inherit ( bool , optional ) \u2013 Inherit existing console styles. Defaults to True. Returns [description] Return type ThemeContext property width : int \u00b6 Get the width of the console. Returns The width (in characters) of the console. Return type int ```","title":"Console"},{"location":"gradient/","text":"MaxGradient.Gradient \u00b6 Maxgradient.gradient.Gradient is a subclass of rich.text.Text , and can be used in the same way. If a gradient is made with just a string, the gradient will automatically generate colors for you. If that's not colorful enough for you, you can pass the rainbow argument to the gradient to generate a rainbow gradient. If you need more control over the gradient, you can pass a list of colors to the gradient. The gradient will be evenly distributed between the colors in the list. The gradient will be applied to the text in the order it is given in the list. Example 1: Random Gradient \u00b6 Example 2: Rainbow Gradient \u00b6 Example 3: Gradient with Specified Colors \u00b6","title":"Gradient"},{"location":"gradient/#maxgradientgradient","text":"Maxgradient.gradient.Gradient is a subclass of rich.text.Text , and can be used in the same way. If a gradient is made with just a string, the gradient will automatically generate colors for you. If that's not colorful enough for you, you can pass the rainbow argument to the gradient to generate a rainbow gradient. If you need more control over the gradient, you can pass a list of colors to the gradient. The gradient will be evenly distributed between the colors in the list. The gradient will be applied to the text in the order it is given in the list.","title":"MaxGradient.Gradient"},{"location":"gradient/#example-1-random-gradient","text":"","title":"Example 1: Random Gradient"},{"location":"gradient/#example-2-rainbow-gradient","text":"","title":"Example 2: Rainbow Gradient"},{"location":"gradient/#example-3-gradient-with-specified-colors","text":"","title":"Example 3: Gradient with Specified Colors"},{"location":"gradient_ref/","text":"Gradient Reference \u00b6 maxgradient.gradient.Gradient is at the core of MaxGradient. Gradient is a subclass of rich.text.Text , and can be used in the same way. The Gradient class however also incorporates maxgradient.color.Color which is an expanded version of rich.color.Color . Gradient can be used to create a gradient of colors or styles. Gradient can also be used to create a rainbow effect, or to invert the colors of the gradient. class Gradient ( rich . text . Text ): \"\"\"Text with gradient color / style.\"\"\" def __init__ ( text : Optional [ str | Text ] = \"\" , colors : Optional [ str | List [ Color | Tuple | str ]] = None , rainbow : bool = False , invert : bool = False , hues : Optional [ int ] = None , color_sample : bool = False , style : StyleType = Style . null (), * , justify : Optional [ JustifyMethod ] = None , overflow : Optional [ OverflowMethod ] = None , no_wrap : Optional [ bool ] = None , end : str = \" \\n \" , tab_size : Optional [ int ] = 8 , spans : Optional [ List [ Span ]] = None ,) -> None :","title":"Gradient"},{"location":"gradient_ref/#gradient-reference","text":"maxgradient.gradient.Gradient is at the core of MaxGradient. Gradient is a subclass of rich.text.Text , and can be used in the same way. The Gradient class however also incorporates maxgradient.color.Color which is an expanded version of rich.color.Color . Gradient can be used to create a gradient of colors or styles. Gradient can also be used to create a rainbow effect, or to invert the colors of the gradient. class Gradient ( rich . text . Text ): \"\"\"Text with gradient color / style.\"\"\" def __init__ ( text : Optional [ str | Text ] = \"\" , colors : Optional [ str | List [ Color | Tuple | str ]] = None , rainbow : bool = False , invert : bool = False , hues : Optional [ int ] = None , color_sample : bool = False , style : StyleType = Style . null (), * , justify : Optional [ JustifyMethod ] = None , overflow : Optional [ OverflowMethod ] = None , no_wrap : Optional [ bool ] = None , end : str = \" \\n \" , tab_size : Optional [ int ] = 8 , spans : Optional [ List [ Span ]] = None ,) -> None :","title":"Gradient Reference"}]}