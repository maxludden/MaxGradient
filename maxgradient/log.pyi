"""Types for log.py"""
from os import environ as environ
from pathlib import Path
from sys import stderr as stderr
from sys import stdout as stdout
from typing import Any, List, Optional, Self

import loguru
from rich.abc import RichRenderable as RichRenderable
from rich.console import Console as RichConsole
from rich.highlighter import RegexHighlighter

from maxgradient.theme import GradientTheme as GradientTheme

CWD: Path
DEBUG_LOG: Path
INFO_LOG: Path
FORMAT: str
VERBOSE: bool

class Singleton(type):
    def __call__(cls, *args, **kwargs): ...

class ColorHighlighter(RegexHighlighter):
    base_style: str
    highlights: List[str]

class Console(RichConsole, metaclass=Singleton):
    def __init__(self) -> None: ...

console_: Console

class Log:
    rich_level: str
    console: Console
    def __init__(
        self, console: Optional[Console] = ..., rich_level: str = ...
    ) -> None: ...
    def __call__(self, *args, **kwargs) -> Self: ...
    def rich_sink(self, message: loguru.Message) -> None: ...
    def rich_filter(self, record: loguru.Record) -> bool: ...
    def debug(self, msg: str) -> None: ...
    def info(self, msg: str) -> None: ...
    def success(self, msg: str) -> None: ...
    def key(self, key: str, value: Any) -> None: ...
    def key_index(self, key: str, index: int, value: Any) -> None: ...
    def warning(self, msg: str | RichRenderable) -> None: ...
    def error(self, msg: str | RichRenderable) -> None: ...
    def critical(self, msg: str | RichRenderable) -> None: ...
    def log(
        self, level: str, msg: str | RichRenderable, verbose: bool = ...
    ) -> None: ...
    def opt(self, *kwargs, depth: int = ...) -> Log: ...
    def disable(self) -> None: ...
    def enable(self, module: str = ...) -> None: ...

def watch(
    *, level: str = ..., depth: int = ..., func_entry: bool = ..., func_exit: bool = ...
): ...
def test_logger() -> None: ...
