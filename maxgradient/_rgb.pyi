from _typeshed import Incomplete
from maxgradient._mode import Mode as Mode
from maxgradient._rich import Rich as Rich
from maxgradient.log import Console as Console, Log as Log
from re import Pattern
from rich.panel import Panel
from rich.text import Text
from typing import Optional, Tuple

console: Incomplete
log: Incomplete

class RGB:
    REGEX: Pattern
    def __init__(self, rgb: str) -> None: ...
    @property
    def original(self) -> str: ...
    @property
    def red(self) -> int: ...
    @property
    def green(self) -> int: ...
    @property
    def blue(self) -> int: ...
    @property
    def value(self) -> str: ...
    @property
    def as_hex(self) -> str: ...
    @property
    def as_tuple(self) -> Tuple[int, int, int]: ...
    @property
    def mode(self) -> Mode: ...
    def parse(self, rgb: str) -> Optional[str]: ...
    def __rich_repr__(self) -> Text: ...
    def __rich__(self) -> Panel: ...
    def __eq__(self, other: RGB) -> bool: ...
    def __hash__(self) -> int: ...
    def is_valid(self) -> bool: ...
